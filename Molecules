#include "TXLib.h"
#include <cmath>
#include <cstdlib>
#include "functions.h"

int main()
{
    int windowx = 1000;
    int windowy = 600;
 int M = 110;
    
    struct Sphere particles[M];
    int k = 1;
    int j = 0;
    for (int i = 0; i < M; i++)
    {
        particles[i].radius = 6;
        particles[i].x = particles[i].radius* (2*j + 1) + 5*(j + 1);
        particles[i].y = k*(5 + 2*particles[i].radius);
        particles[i].N = 2;
        particles[i].vx = 30;
        particles[i].vy = 10 + 5*(i/10);
        particles[i].r = 255;
        particles[i].g = 255;
        particles[i].b = 255;
        j += 1;
        if (particles[i].x > windowx - 3*particles[i].radius - 10)
        {
            k += 1;
            j = 0;
        }
        if (particles[i].y > windowy - 3*particles[i].radius - 10)
        {
            break;
        }
    }

    const double DT = 0.01;
    txCreateWindow(windowx, windowy);
    txSetFillColor(RGB(0, 0, 0));

    while(true)
    {

        txBegin();
        txClear();

        for (int i = 1; i < M; i++)
        {
            draw(particles[i]);
        }

        txEnd();

        for (int i = 1; i < M; i++)
        {
            move(&(particles[i]), DT);
        }

        for (int i = 1; i < M; i++)
        {
            checkCollision(&(particles[i]), windowx, windowy);
        }

       /* for (int i = 0; i < M; i++)
        {
            resolveWallCollision(&(particles[i]), windowx, windowy);
        } */

        for (int i = 1; i < M; i++)
        {
            for (int j = i+1; j < M; j++)

                if (checkTwoSpheres(&(particles[i]), &(particles[j])))
                {
                    collisionTwoSpheres(&(particles[i]), &(particles[j]));

                }

        }

    }
    return 0;

}
